#ifndef RASCHET_H
#define RASCHET_H

#include "iostream"
#include "map"
#include "math.h"

struct St {
  float Asef;
  int diam;
};
class Params {
public:
  Params(float bf, float b, float hf, float h, float a, float M, float A,
         float B)
      : bf(bf), b(b), hf(hf), h(h), a(a), M(M) {
    Rs = paramsArmatur[A] * 1000000;
    Rb = paramsBeton[B] * 1000000;
  }

  float Raschet();

  St Italon(float As, float N);

private:
  float bf;
  float b;
  float hf;
  float h;
  float a;
  float M;
  float Rb;
  float Rs;

  std::map<float, float> paramsArmatur = {{0, 210}, {1, 350}, {2, 435},
                                          {3, 520}, {4, 695}, {5, 870}};
  std::map<float, float> paramsBeton = {
      {0, 2.1}, {1, 2.8},  {2, 4.5},   {3, 6},    {4, 7.5},
      {5, 8.5}, {6, 11.5}, {7, 14.5},  {8, 17},   {9, 19.5},
      {10, 22}, {11, 25},  {12, 27.5}, {13, 30},  {14, 33},
      {15, 37}, {16, 41},  {17, 44},   {18, 47.5}};
  std::vector<St> diametr1 = {
      {7.1, 3},     {12.6, 4},   {19.6, 5},   {28.3, 6},   {50.3, 8},
      {78.5, 10},   {113.1, 12}, {153.9, 14}, {201.1, 16}, {254.5, 18},
      {314.2, 20},  {380.1, 22}, {490.9, 25}, {615.8, 28}, {804.3, 32},
      {1017.9, 36}, {1256.6, 40}};
  std::vector<St> diametr2 = {
      {14.1, 3}, {25.1, 4},  {39.3, 5},  {57, 6},    {101, 8},  {157, 10},
      {226, 12}, {308, 14},  {402, 16},  {509, 18},  {628, 20}, {760, 22},
      {982, 25}, {1232, 28}, {1609, 32}, {2036, 36}, {2513, 40}};
  std::vector<St> diametr3 = {
      {21.2, 3},  {37.7, 4},  {58.9, 5},  {85, 6},    {151, 8},  {236, 10},
      {339, 12},  {462, 14},  {603, 16},  {763, 18},  {942, 20}, {1140, 22},
      {1473, 25}, {1847, 28}, {2413, 32}, {3054, 36}, {3770, 40}};
  std::vector<St> diametr4 = {
      {28.3, 3},  {50.2, 4},  {78.5, 5},  {113, 6},   {201, 8},   {314, 10},
      {452, 12},  {616, 14},  {804, 16},  {1018, 18}, {1256, 20}, {1520, 22},
      {1963, 25}, {2463, 28}, {3217, 32}, {4072, 36}, {5027, 40}};
  std::vector<St> diametr5 = {
      {35.3, 3},  {62.8, 4},  {98.2, 5},  {141, 6},   {251, 8},   {393, 10},
      {565, 12},  {769, 14},  {1005, 16}, {1272, 18}, {1571, 20}, {1900, 22},
      {2454, 25}, {3079, 28}, {4021, 32}, {5089, 36}, {6283, 40}};
  std::vector<St> diametr6 = {
      {42.4, 3},  {75.4, 4},  {117.8, 5}, {170, 6},   {302, 8},   {471, 10},
      {679, 12},  {923, 14},  {1206, 16}, {1527, 18}, {1885, 20}, {2281, 22},
      {2845, 25}, {3695, 28}, {4826, 32}, {6107, 36}, {7540, 40}};
  std::vector<St> diametr7 = {
      {49.5, 3},  {87.5, 4},  {137.5, 5}, {198, 6},   {352, 8},   {550, 10},
      {792, 12},  {1077, 14}, {1407, 16}, {1781, 18}, {2199, 20}, {2661, 22},
      {3436, 25}, {4310, 28}, {5630, 32}, {7125, 36}, {8796, 40}};
  std::vector<St> diametr8 = {
      {56.5, 3},  {100.5, 4}, {157.1, 5}, {226, 6},   {402, 8},   {628, 10},
      {905, 12},  {1231, 14}, {1608, 16}, {2036, 18}, {2513, 20}, {3041, 22},
      {3927, 25}, {4926, 28}, {6434, 32}, {8143, 36}, {10053, 40}};
  std::vector<St> diametr9 = {
      {63.6, 3},  {113, 4},   {176.7, 5}, {254, 6},   {453, 8},   {707, 10},
      {1018, 12}, {1385, 14}, {1810, 16}, {2290, 18}, {2827, 20}, {3427, 22},
      {4418, 25}, {5542, 28}, {7238, 32}, {9161, 36}, {11310, 40}};

  std::vector<std::vector<St>> paramDiam{diametr1, diametr2, diametr3,
                                         diametr4, diametr5, diametr6,
                                         diametr7, diametr8, diametr9};
};

float Params::Raschet() {
  // 0
  if (a > h) {
    throw std::runtime_error("a>h");
  }
  float ho = h - a;

  // 1
  float Mf = Rb * 0.9 * bf * hf * (ho - hf / 2);

  if (Mf <= 0) {
    throw std::runtime_error("Mf<=0");
  }
  float b0 = 0;
  if (M <= Mf) {
    b0 = bf;
  } else {
    b0 = b;
  }

  // 2
  float Im = M / (0.9 * Rb * b0 * ho * ho);
  // 3
  float E = 1 - 2 * Im;
  if (E <= 0) {
    throw std::runtime_error("отрицательное число под корнем");
  }
  E = 1 - sqrt(E);
  // 4

  float AS = Rb * 0.9 * b0 * ho * E * 10000 / Rs;
  return AS;
}

St Params::Italon(float As, float N) {
  int i = 0;
  while ((paramDiam.at(N).at(i).Asef < As) && (i < 17)) {
    ++i;
  }

  return paramDiam.at(N).at(i);
}

#endif // RASCHET_H
